package com.whut.myMap;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.whut.myMap.adapter.CommentListViewAdapter_speak;
import com.whut.myMap.adapter.ScollListView;
import com.whut.myMap.adapter.SpeakGridViewAdapter;
import com.whut.myMap.adapter.CommentListViewAdapter_my.ViewHolder;
import com.whut.myMap.adapter.SpeakGridView;
import com.whut.myMap.domain.comment_message;
import com.whut.myMap.domain.huifubean;
import com.whut.myMap.domain.redsbean;
import com.whut.myMap.domain.redsbean;
import com.whut.myMap.serverce.findshoucang;
import com.whut.myMap.serverce.findzan;
import com.whut.myMap.utils.gsonutil;
import com.whut.net.favornet;
import com.whut.net.getHuifuNet;
import com.whut.net.getLredsbytimenet;
import com.whut.net.loginnet;
import com.whut.net.praisenet;

import android.R.integer;
import android.app.ActionBar;
import android.app.Activity;
import android.content.Intent;
import android.graphics.BitmapFactory;
import android.graphics.Bitmap.Config;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.text.Html;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.AdapterView.OnItemClickListener;
/**
 * list为评论列表 其余从上级传 坐标不知道
 * @author xxr
 *
 */
public class Speak_MainNET extends Activity {
	private static final int GONE = 8;
	private static final int VISIBLE = 0;
	private ScollListView mListView;
	List<comment_message> list=new ArrayList<comment_message>();
	private redsbean redsbean;
	private ImageView imageHead;
	private TextView name;
	private TextView date;
	private TextView content;
	private ImageView comment;
	private ImageView praise;
	private ImageView favour;
	private TextView comment_tv;
	private TextView praise_tv;
	private TextView favour_tv;
	private Button map_show;
	private static boolean iszan;
	private static boolean isshoucang;
	private static int zaned=2;
	private SpeakGridView speakGridView;
	CommentListViewAdapter_speak myAdapter;
private int Reds_id;
private int Dongtai_User_id;
private static String jsonstring;
private final int SHOW_RESPONSE_PRAISE=0;
private final int SHOW_RESPONSE_HUIFU=1;
private final int SHOW_RESPONSE_SHOUCANG=2;
private Handler handler=new Handler(){
	public void handleMessage(Message msg) {
		switch (msg.what) {
		case SHOW_RESPONSE_PRAISE:
			Log.i("zai", "enene2");
			if(msg.obj!=null){
				Log.i("zai", "enene");
				if(Integer.parseInt((String) msg.obj)==1){
					if(iszan){
						new findzan(getApplicationContext()).deletezaned(redsbean.getReds().getReds_id(),redsbean.getReds().getType(),getApplicationContext());
					    showzan(false);
					    zaned=0;
					}else{
						new findzan(getApplicationContext()).addzaned(redsbean.getReds().getReds_id(),redsbean.getReds().getType(),getApplicationContext());
					    showzan(true);
					    zaned=1;
					}
				}
				else{
					Toast.makeText(getApplication(), "网络异常，请检查网络！！", 0).show();
					return;
				}
			}
			break;
		case SHOW_RESPONSE_HUIFU:
			Log.i("zai", "enene2");
			if(Integer.parseInt((String) msg.obj)==1){
				Log.i("zai", "enene");
					Log.i("zai", "enene3");
					gsonutil gson=new gsonutil();
					Log.i("json",jsonstring);
					System.out.println(jsonstring);
					 List<comment_message>temp=(ArrayList<comment_message>) gson.fromJsonList(jsonstring, comment_message.class);
					 list.clear();
					 list.addAll(temp);
					myAdapter.notifyDataSetChanged();  
			}else{					
					Toast.makeText(getApplication(), "网络异常，请检查网络！！", 0).show();	
					return;
				}
			break;
		case SHOW_RESPONSE_SHOUCANG:
			Log.i("zai", "enene2");
			if(msg.obj!=null){
				Log.i("zai", "enene");
				if(Integer.parseInt((String) msg.obj)==1){
					if(isshoucang){
						new findshoucang(getApplicationContext()).deleteshoucanged(redsbean.getReds().getReds_id(),redsbean.getReds().getType(),getApplicationContext());
					    showshoucang(false);
					}else{
						new findshoucang(getApplicationContext()).addshoucanged(redsbean.getReds().getReds_id(),redsbean.getReds().getType(),getApplicationContext());
					    showshoucang(true);
					}
				}else if (Integer.parseInt((String) msg.obj)==2) {
					return;
				}
				else{
					Toast.makeText(getApplication(), "网络异常，请检查网络！！", 0).show();
					return;
				}
			}
			break;
		}	
	}	
};
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.speak_item_main);
		Intent intent=getIntent();
		Bundle bundle=intent.getExtras();
		redsbean= (com.whut.myMap.domain.redsbean) bundle.getSerializable("speak_item");
		 myAdapter = new CommentListViewAdapter_speak(list,redsbean.getReds().getUser_id(),this);
		 getData();
		 Reds_id=redsbean.getReds().getReds_id();
		 Dongtai_User_id=redsbean.getReds().getUser_id();
		Log.i("Speak_main", ""+Reds_id);	
		mListView = (ScollListView) findViewById(R.id.sim_comment);
		// 把view层对象ListView和控制器BaseAdapter关联起来
		mListView.setAdapter(myAdapter);
		imageHead=(ImageView) findViewById(R.id.imgHead);
		name=(TextView) findViewById(R.id.tvName);
		date=(TextView) findViewById(R.id.tvDate);
		content=(TextView) findViewById(R.id.tvContent);
        map_show=(Button) findViewById(R.id.map_show);      
        mListView.setOnItemClickListener(new OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {
				Intent intent = new Intent(Speak_MainNET.this, WriteComment.class);
				comment_message cMessage=new comment_message();
				Bundle bundle=new Bundle();
				cMessage.setType(redsbean.getReds().getType());
				cMessage.setSource_id(Reds_id);
				cMessage.setCeduserid(list.get(position).getHuifu_user_id());
				cMessage.setCedusername(list.get(position).getHuifu_user_name());
				cMessage.setHuifu_id(list.get(position).getHuifu_id());
				intent.putExtra("tp", 0);
				bundle.putSerializable("comment_user_who", cMessage);
				intent.putExtras(bundle);
				startActivityForResult(intent, 0);
			}
		});  
        map_show.setOnClickListener(new OnClickListener() {		
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				Intent intent = new Intent(Speak_MainNET.this, RedslocationNET.class);
				Bundle bundle=new Bundle();
				bundle.putSerializable("speak_item", redsbean);
				intent.putExtras(bundle);
				startActivity(intent);
				Log.e("imageurl",redsbean.getListmap().get(0).getImgurl());
			}
		});
		try {
			DisplayImageOptions options = new DisplayImageOptions.Builder()//
			.showImageOnLoading(R.drawable.ic_launcher) // 加载中显示的默认图片
			.showImageOnFail(R.drawable.ic_launcher) // 设置加载失败的默认图片
			.cacheInMemory(true) // 内存缓存
			.cacheOnDisk(true) // sdcard缓存
			.bitmapConfig(Config.RGB_565)// 设置最低配置
			.build();//
	ImageLoader.getInstance().displayImage(redsbean.getUrl(),
			imageHead, options);
		}catch(Exception e){
			imageHead.setImageResource(R.drawable.default_head);
		}
		name.setText(redsbean.getUsername());
		date.setText(redsbean.getReds().getDate().substring(0, 16));
		content.setText(redsbean.getReds().getWords());
		comment = (ImageView) findViewById(R.id.comment);
		praise = (ImageView) findViewById(R.id.praise);
		favour = (ImageView) findViewById(R.id.favour);
		comment_tv = (TextView) findViewById(R.id.comment_tv);
		praise_tv = (TextView) findViewById(R.id.praise_tv);
		favour_tv = (TextView) findViewById(R.id.favour_tv);
		speakGridView=(SpeakGridView) findViewById(R.id.tvGridview);	
		showzan(new findzan(getApplicationContext()).findzaned(redsbean.getReds().getReds_id(), redsbean.getReds().getType(), getApplicationContext()));
		showshoucang(new findshoucang(getApplicationContext()).findshoucanged(redsbean.getReds().getReds_id(), redsbean.getReds().getType(), getApplicationContext()));
		if(redsbean.getListmap()==null){
			speakGridView.setVisibility(GONE);
		}
		else {
			speakGridView.setVisibility(VISIBLE);
			ArrayList<String> transPicture=new ArrayList<String>();
			for (int i = 0; i < redsbean.getListmap().size(); i++) {
				transPicture.add(redsbean.getListmap().get(i).getImgurl()); 
				Log.e("imageurl", redsbean.getListmap().get(0).getImgurl());
			}
			ArrayList<String> imageUrls = new ArrayList<String>();
			for (int i = 0; i < transPicture.size(); i++) {
				String image=transPicture.get(i);
				int index=image.lastIndexOf("_");
				imageUrls.add(image.substring(0, index)+".jpg");	
			}
			speakGridView.setAdapter(new SpeakGridViewAdapter(this, imageUrls,transPicture));
		}
		comment.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				Intent intent = new Intent(Speak_MainNET.this, WriteComment.class);
				comment_message cMessage=new comment_message();
				cMessage.setCeduserid(0);
				cMessage.setSource_id(Reds_id);
				cMessage.setType(redsbean.getReds().getType());
//				cMessage.setCedusername();
//				cMessage.setHuifu_id(list.get(position).getHuifu_id()0);
				Bundle bundle=new Bundle();
				bundle.putSerializable("comment_user_who",cMessage);
				intent.putExtras(bundle);
				startActivityForResult(intent, 0);
			}
		});
		praise.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				new Thread(new Runnable() {	
					String result;
					int isjia;
					@Override
					public void run() {
						// TODO Auto-generated method stub
						try {
							Map<String, String> param=new HashMap<String, String>();
							System.out.println(Reds_id);
							System.out.println(redsbean.getReds().getType());
                            if(iszan) isjia=0;
                            else isjia=1;
							param.put("type", redsbean.getReds().getType()+"");
                            param.put("sourceid", Reds_id+"");
                            param.put("isjia", isjia+"");
				            result=praisenet.praise(param); 
							} catch (Exception e) {
							// TODO: handle exception
							result="0";
						}finally{
					Message message=new Message();
					message.what=SHOW_RESPONSE_PRAISE;
					if(result!=null||result!=""){
					message.obj=result.toString();
					}else {
						message.obj="2";
					}
					handler.sendMessage(message);	
						}				
					}
				}).start();	
			}
		});
		favour.setOnClickListener(new OnClickListener() {		
			@Override
			public void onClick(View v) {
				new Thread(new Runnable() {	
					String result;
					int isjia;
					@Override
					public void run() {
						// TODO Auto-generated method stub
						try {
							Map<String, String> param=new HashMap<String, String>();
							System.out.println(Reds_id);
							System.out.println(redsbean.getReds().getType());
							 if(isshoucang) isjia=0;
	                            else isjia=1;
							param.put("isjia", isjia+"");
                            param.put("type", redsbean.getReds().getType()+"");
                            param.put("sourceid", Reds_id+"");
				            result=favornet.favor(param); 
							} catch (Exception e) {
							// TODO: handle exception
							result="0";
						}finally{
					Message message=new Message();
					message.what=SHOW_RESPONSE_SHOUCANG;
					if(result!=null||result!=""){
						message.obj=result.toString();
						}else {
							message.obj="2";
						}		
					handler.sendMessage(message);	
						}				
					}
				}).start();	
			}
		});
	}
	public void showzan(boolean bool) {
		if(bool){
			praise.setImageBitmap(BitmapFactory
					.decodeResource(getResources(),
							R.drawable.good_clicked));
			praise_tv.setText("已赞");
			iszan=true;
		}else{
			praise.setImageBitmap(BitmapFactory
					.decodeResource(getResources(),
							R.drawable.good_main));
			praise_tv.setText("赞");
			iszan=false;
		}
	}
	public void showshoucang(boolean bool) {
		if(bool){
					favour.setImageBitmap(BitmapFactory
							.decodeResource(getResources(),
									R.drawable.favor_clicked));
					favour_tv.setText("已收藏");
			isshoucang=true;
		}else{
			favour.setImageBitmap(BitmapFactory
					.decodeResource(getResources(),
							R.drawable.favourite_main));
			favour_tv.setText("收藏");
			isshoucang=false;
		}
	}
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// TODO Auto-generated method stub
		super.onCreateOptionsMenu(menu);
		ActionBar mActionBar = getActionBar();
		mActionBar.setTitle(R.string.speak_main);
		mActionBar.setDisplayHomeAsUpEnabled(true);
		mActionBar.setDisplayShowHomeEnabled(false);
		return true;
	}
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// TODO Auto-generated method stub
		switch (item.getItemId()) {
		case android.R.id.home:
			sendZanBack();
			finish();
			this.overridePendingTransition(R.anim.tran_pre_in,
					R.anim.tran_pre_out);
			return true;
		default:
			return super.onOptionsItemSelected(item);
		}
	}	
	/**
	 * 
	 * 评论
	 * 评论，日期，被评头像，被评人名字
	 * @return
	 */	
	private void getData() {
		new Thread(new Runnable() {
			private String result;
			@Override
			public void run() { 
		try { 
		// TODO Auto-generated method stub
		Log.i("comment",Reds_id+"");
		Map<String,String> param=new HashMap<String, String>();
		param.put("source_id", Reds_id+"");
		param.put("type", 0+"");
		getHuifuNet gHuifuNet=new getHuifuNet();
		String jsonstring1=gHuifuNet.getHuifu(param);
		  if(jsonstring1!=null&&jsonstring1.length()>0){
          	jsonstring=jsonstring1;	
          	result="1";
          }else{
          	result="0";
          	return;
          }
			} catch (Exception e) {
			// TODO: handle exception
			result="2";
		}finally{
	Log.i("result",result.toString());
	Message message=new Message();
	message.what=SHOW_RESPONSE_HUIFU;
	message.obj=result.toString();		
	handler.sendMessage(message);	
		}
			}
		}).start();         
	}
	
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		// TODO Auto-generated method stub
		if (resultCode != Activity.RESULT_OK) {// result is not correct
			return;
		} else {
			if (requestCode == 0) {
				Bundle bundle = data.getExtras();
				comment_message cMessage=(comment_message) bundle.getSerializable("comment");
				list.add(0,cMessage);
				myAdapter.notifyDataSetChanged();
				}		
			
	}
	}

	@Override
	public void onBackPressed() {
		sendZanBack();
		finish();
		overridePendingTransition(R.anim.tran_pre_in, R.anim.tran_pre_out);
	return;
	}
	
protected void sendZanBack() {
	// TODO Auto-generated method stub
	Intent intent=new Intent();
	intent.putExtra("zaned", zaned);
	zaned = 2;
	setResult(RESULT_OK,intent);
}
}