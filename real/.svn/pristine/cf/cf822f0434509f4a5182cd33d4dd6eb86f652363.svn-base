package com.whut.myMap;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.whut.myMap.domain.adviser;
import com.whut.myMap.domain.concernview;
import com.whut.myMap.entites.user;
import com.whut.myMap.utils.gsonutil;
import com.whut.net.changeConcern;
import com.whut.net.returnlistadviser;

import android.app.ActionBar;
import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.graphics.Bitmap.Config;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v4.view.PagerAdapter;
import android.support.v4.view.ViewPager;
import android.support.v4.widget.EdgeEffectCompat;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import android.widget.Toast;

public class PersonalAdviser extends Activity {
	protected static final int SHOW_RESPONSE = 0;
	private ActionBar mActionBar;
	private ViewPager mGalleryViewPager;

	private LinearLayout mViewPagerContainer;

	private int pagerWidth = 0;

	private List<adviser> mList;

	private List<View> views;// Tab页面列表

	private ProgressDialog pd;
	protected static String jsonstring;
     private static int pos=0;
	private Handler handler = new Handler() {
		public void handleMessage(Message msg) {
			switch (msg.what) {
			case SHOW_RESPONSE:
				Log.i("zai", "enene2");
				if (Integer.parseInt((String) msg.obj) == 1) {
					Log.i("zai", "enene");
					Log.i("zai", "enene3");
					gsonutil gson = new gsonutil();
					mList = (ArrayList<adviser>) gson.fromJsonList(jsonstring, adviser.class);
					initChildView(mList);
					pd.dismiss();
				} else {
					Toast.makeText(PersonalAdviser.this, "获取数据失败，请重新尝试！", 1).show();
					pd.dismiss();
					return;
				}
				break;

			}
		}
	};

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.gallerypager);

		mGalleryViewPager = (ViewPager) findViewById(R.id.gallery_viewpager);
		mViewPagerContainer = (LinearLayout) findViewById(R.id.gallery_viewpager_layout);
		pagerWidth = (int) (getResources().getDisplayMetrics().widthPixels * 3.0f / 5.0f);
		mGalleryViewPager.measure(0, 0);
		mGalleryViewPager.setOverScrollMode(mGalleryViewPager.OVER_SCROLL_NEVER); 
		LayoutParams lp = mGalleryViewPager.getLayoutParams();
		if (lp == null) {
			lp = new LayoutParams(pagerWidth, LayoutParams.MATCH_PARENT);
		} else {
			lp.width = pagerWidth;
		}
		mGalleryViewPager.setLayoutParams(lp);// 设置页面宽度为屏幕的3/5
		views = new ArrayList<View>();
		pd = ProgressDialog.show(PersonalAdviser.this, "标题", "加载中，请稍等");
		getData();

	}

	private void getData() {
		// TODO Auto-generated method stub
		new Thread(new Runnable() {
			private String result;

			@Override
			public void run() {
				try {
					// TODO Auto-generated method stub
					returnlistadviser returnlistadviser=new returnlistadviser();
					String jsonstring1 = returnlistadviser.returnadviser();
					System.out.println(jsonstring1 + "jsonstring");
					if (jsonstring1 != null && jsonstring1.length() > 0) {
						jsonstring = jsonstring1;
						result = "1";
					} else {
						result = "0";
						return;
					}
				} catch (Exception e) {
					// TODO: handle exception
					result = "0";
				} finally {
					Log.i("result", result.toString());
					Message message = new Message();
					message.what = SHOW_RESPONSE;
					message.obj = result.toString();
					handler.sendMessage(message);
				}
			}
		}).start();
	}

	private void initChildView(List<adviser> aList) {
		if (aList != null && aList.size() > 0) {
			for (int i = 0; i < aList.size(); i++) {
				LayoutInflater inflater = getLayoutInflater();
				View viewchild = inflater.inflate(R.layout.adviser_item, null);
				ImageView portrait = (ImageView) viewchild.findViewById(R.id.portrait);
				TextView name = (TextView) viewchild.findViewById(R.id.name);
				TextView serve = (TextView) viewchild.findViewById(R.id.serve);
				TextView instruction = (TextView) viewchild.findViewById(R.id.instruction);
				RelativeLayout confirm=(RelativeLayout) viewchild.findViewById(R.id.press);
				DisplayImageOptions options = new DisplayImageOptions.Builder()//
						.showImageOnLoading(R.drawable.plugin_camera_no_pictures) // 加载中显示的默认图片
						.showImageOnFail(R.drawable.background_failed) // 设置加载失败的默认图片
						.cacheInMemory(true) // 内存缓存
						.bitmapConfig(Config.RGB_565)// 设置最低配置
						.build();
				ImageLoader.getInstance().displayImage(aList.get(i).getPortrait(), portrait, options);
				name.setText(aList.get(i).getName());
				serve.setText("服务" + aList.get(i).getServetime() + "次");
				instruction.setText("自我介绍：" + aList.get(i).getInstruction());
				confirm.setOnClickListener(new OnClickListener() {
					
					@Override
					public void onClick(View v) {
						// TODO Auto-generated method stub
						Bundle bundle=new Bundle();
						bundle.putSerializable("adviser", mList.get(pos));
						Intent intent=new Intent(PersonalAdviser.this, PersonalAdviserMain.class);
						intent.putExtras(bundle);
						startActivity(intent);
						overridePendingTransition(R.anim.tran_in, R.anim.tran_out);
					}
				});
				views.add(viewchild);

			}
		}

		mGalleryViewPager.setOffscreenPageLimit(4); // 设置ViewPager至多缓存4个Pager页面，防止多次加载
		mGalleryViewPager.setPageMargin(50); // 设置Pager之间的间距
		mGalleryViewPager.setAdapter(new GalleryPagerAdapter(views));

		mGalleryViewPager.setOnPageChangeListener(new ViewPager.SimpleOnPageChangeListener() {
			@Override
			public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) {
				super.onPageScrolled(position, positionOffset, positionOffsetPixels);
				
				if (mViewPagerContainer != null) {
					mViewPagerContainer.invalidate(); // 更新超出区域页面，否则会出现页面缓存，导致页面效果不佳
				}
			}
			@Override
			public void onPageSelected(int position) {
				// TODO Auto-generated method stub
				super.onPageSelected(position);
				pos=position;
			}
		});
	}

	private class GalleryPagerAdapter extends PagerAdapter {
		private List<View> mListViews;
		private int mChildCount = 0;

		@Override
		public int getCount() {
			return mListViews.size();
		}

		public GalleryPagerAdapter(List<View> mListViews) {
			this.mListViews = mListViews;
			
		}

		@Override
		public boolean isViewFromObject(View view, Object obj) {
			return view == obj;
		}

		@Override
		public void destroyItem(ViewGroup container, int position, Object object) {
			((ViewPager) container).removeView((View) object);
		}

		@Override
		public Object instantiateItem(ViewGroup container, int position) {
			// int resId = getResources().getIdentifier("bac", "drawable",
			// getPackageName());
			// ImageView imageView = createImageView(resId);
			// ((ViewPager)container).addView(imageView, position);
			// return imageView;
			container.addView(mListViews.get(position), 0);
			return mListViews.get(position);
		}

		// public ImageView createImageView(int resId)
		// {
		// ImageView iv = new ImageView(ViewPagerGallery.this);
		// LayoutParams lp = iv.getLayoutParams();
		// if(lp==null)
		// {
		// lp = new LayoutParams(pagerWidth, LayoutParams.MATCH_PARENT);
		// }else{
		// lp.width = pagerWidth;
		// lp.height = LayoutParams.MATCH_PARENT;
		// }
		// iv.setScaleType(ScaleType.FIT_CENTER);
		// iv.setImageResource(resId);
		// iv.setLayoutParams(lp);
		// return iv;
		// }
		//
		@Override
		public void notifyDataSetChanged() {
			mChildCount = getCount();
			super.notifyDataSetChanged();
		}

		@Override
		public int getItemPosition(Object object) {
			if (mChildCount > 0) {
				mChildCount--;
				return POSITION_NONE;
			}
			return super.getItemPosition(object);
		}
		
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// TODO Auto-generated method stub
		super.onCreateOptionsMenu(menu);
		mActionBar = getActionBar();
		mActionBar.setTitle(R.string.personal_adviser);
		mActionBar.setDisplayHomeAsUpEnabled(true);
		mActionBar.setDisplayShowHomeEnabled(false);
		return true;

	}

	@Override
	public void onBackPressed() {
		super.onBackPressed();
		System.out.println("按下了back键   onBackPressed()");
		showPre();
	}

	public void showPre() {
		// TODO Auto-generated method stub
		finish();
		overridePendingTransition(R.anim.tran_pre_in, R.anim.tran_pre_out);
	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// TODO Auto-generated method stub
		switch (item.getItemId()) {
		case android.R.id.home:
			finish();
			this.overridePendingTransition(R.anim.tran_pre_in, R.anim.tran_pre_out);
			return true;
		default:
			return super.onOptionsItemSelected(item);
		}
	}
}
