package com.whut.myMap;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.whut.myMap.domain.ELchild;
import com.whut.myMap.domain.ELparent;

import android.app.ActionBar;
import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseExpandableListAdapter;
import android.widget.ExpandableListView;
import android.widget.ImageView;
import android.widget.TextView;

public class MedalInfo extends Activity{

	ExpandableListView mainlistview = null;
	List<ELparent> parent = null;
	Map<String, List<ELchild>> map = null;
ActionBar mActionBar;
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.medal_info);
		mainlistview = (ExpandableListView) this.findViewById(R.id.main_expandablelistview);
		mainlistview.setGroupIndicator(null);
		initData();
		// mainlistview.addh
		LayoutInflater inflater = LayoutInflater.from(MedalInfo.this);
		View placeHolderView = inflater.inflate(R.layout.medal_head, null);
		mainlistview.addHeaderView(placeHolderView);
		mainlistview.setAdapter(new MyAdapter());
	}

	// 初始化数据
	public void initData() {
		parent = new ArrayList<ELparent>();
		parent.add(new ELparent("1", R.drawable.travels, "游记大师"));
		parent.add(new ELparent("2", R.drawable.city, "城市达人"));
		parent.add(new ELparent("3", R.drawable.roaddoctor, "路博士"));
		parent.add(new ELparent("4", R.drawable.mileway, "徒步旅行家"));
		parent.add(new ELparent("5", R.drawable.goodmaster, "集赞者"));
		parent.add(new ELparent("6", R.drawable.goldwriter, "金牌作者"));
		parent.add(new ELparent("7", R.drawable.fansking, "人气王"));
		parent.add(new ELparent("8", R.drawable.favormaster, "收集狂"));
		parent.add(new ELparent("9", R.drawable.kingsoftravel, "信天翁"));
		map = new HashMap<String, List<ELchild>>();

		List<ELchild> list1 = new ArrayList<ELchild>();
		list1.add(new ELchild(1, "发表1篇游记"));
		list1.add(new ELchild(2, "发表5篇游记"));
		list1.add(new ELchild(3, "发表20篇游记"));
		list1.add(new ELchild(4, "发表50篇游记"));
		list1.add(new ELchild(5, "发表100篇游记"));
		map.put("1", list1);

		List<ELchild> list2 = new ArrayList<ELchild>();
		list2.add(new ELchild(1, "去过2个城市"));
		list2.add(new ELchild(2, "去过5个城市"));
		list2.add(new ELchild(3, "去过10个城市"));
		list2.add(new ELchild(4, "去过20个城市"));
		list2.add(new ELchild(5, "去过50个城市"));
		map.put("2", list2);

		List<ELchild> list3 = new ArrayList<ELchild>();
		list3.add(new ELchild(1, "添加1个地理标志"));
		list3.add(new ELchild(2, "添加5个地理标志"));
		list3.add(new ELchild(3, "添加10个地理标志"));
		list3.add(new ELchild(4, "添加20个地理标志"));
		list3.add(new ELchild(5, "添加50个地理标志"));
		map.put("3", list3);
		List<ELchild> list4 = new ArrayList<ELchild>();
		list4.add(new ELchild(1, "记录游记总里程达1000米"));
		list4.add(new ELchild(2, "记录游记总里程达5000米"));
		list4.add(new ELchild(3, "记录游记总里程达10000米"));
		list4.add(new ELchild(4, "记录游记总里程达50000米"));
		list4.add(new ELchild(5, "记录游记总里程达100000米"));
		map.put("4", list4);

		List<ELchild> list5 = new ArrayList<ELchild>();
		list5.add(new ELchild(1, "单篇游记获得10个赞"));
		list5.add(new ELchild(2, "单篇游记获得100个赞"));
		list5.add(new ELchild(3, "单篇游记获得500个赞"));
		list5.add(new ELchild(4, "单篇游记获得1000个赞"));
		list5.add(new ELchild(5, "单篇游记获得3000个赞"));
		map.put("5", list5);

		List<ELchild> list6 = new ArrayList<ELchild>();
		list6.add(new ELchild(1, "总点赞数达到50"));
		list6.add(new ELchild(2, "总点赞数达到200"));
		list6.add(new ELchild(3,"总点赞数达到1000"));
		list6.add(new ELchild(4, "总点赞数达到5000"));
		list6.add(new ELchild(5, "总点赞数达到10000"));
		map.put("6", list6);
		List<ELchild> list7 = new ArrayList<ELchild>();
		list7.add(new ELchild(1, "粉丝达到10人"));
		list7.add(new ELchild(2, "粉丝达到50人"));
		list7.add(new ELchild(3,"粉丝达到100人"));
		list7.add(new ELchild(4, "粉丝达到500人"));
		list7.add(new ELchild(5, "粉丝达到1000人"));
		map.put("7", list7);
		List<ELchild> list8 = new ArrayList<ELchild>();
		list8.add(new ELchild(1, "收藏游记5篇"));
		list8.add(new ELchild(2, "收藏游记20篇"));
		list8.add(new ELchild(3,"收藏游记50篇"));
		list8.add(new ELchild(4, "收藏游记100篇"));
		list8.add(new ELchild(5, "收藏游记300篇"));
		map.put("8", list8);
	
	List<ELchild> list9 = new ArrayList<ELchild>();
	list9.add(new ELchild(1, "拥有100积分"));
	list9.add(new ELchild(2, "拥有500积分"));
	list9.add(new ELchild(3,"拥有1000积分"));
	list9.add(new ELchild(4, "拥有2000积分"));
	list9.add(new ELchild(5, "拥有5000积分"));
	map.put("9", list9);
	}
	class MyAdapter extends BaseExpandableListAdapter {

		// 得到子item需要关联的数据
		@Override
		public Object getChild(int groupPosition, int childPosition) {
			String key = parent.get(groupPosition).getNum();
			return (map.get(key).get(childPosition));
		}

		// 得到子item的ID
		@Override
		public long getChildId(int groupPosition, int childPosition) {
			return childPosition;
		}

		// 设置子item的组件
		@Override
		public View getChildView(int groupPosition, int childPosition, boolean isLastChild, View convertView,
				ViewGroup parent) {
			String key = MedalInfo.this.parent.get(groupPosition).getNum();
			ELchild info = map.get(key).get(childPosition);
			if (convertView == null) {
				LayoutInflater inflater = (LayoutInflater) MedalInfo.this
						.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
				convertView = inflater.inflate(R.layout.medal_layout_children, null);
			}
			TextView tv = (TextView) convertView.findViewById(R.id.second_textview);
			TextView tv2 = (TextView) convertView.findViewById(R.id.first_textview);
			tv.setText(info.getText());
			tv2.setText("LV"+info.getNum());
			return convertView;
		}

		// 获取当前父item下的子item的个数
		@Override
		public int getChildrenCount(int groupPosition) {
			String key = parent.get(groupPosition).getNum();
			System.out.println(key);
			int size = map.get(key).size();
			System.out.println(size);
			return size;
		}

		// 获取当前父item的数据
		@Override
		public Object getGroup(int groupPosition) {
			return parent.get(groupPosition);
		}

		@Override
		public int getGroupCount() {
			return parent.size();
		}

		@Override
		public long getGroupId(int groupPosition) {
			return groupPosition;
		}

		// 设置父item组件
		@Override
		public View getGroupView(int groupPosition, boolean isExpanded, View convertView, ViewGroup parent) {
			if (convertView == null) {
				LayoutInflater inflater = (LayoutInflater) MedalInfo.this
						.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
				convertView = inflater.inflate(R.layout.medal_layout_parent, null);
			}
			TextView tv = (TextView) convertView.findViewById(R.id.parent_textview);
			tv.setText(MedalInfo.this.parent.get(groupPosition).getTitle());
			ImageView pic=(ImageView) convertView.findViewById(R.id.img);
			pic.setImageResource(MedalInfo.this.parent.get(groupPosition).getImage());
			ImageView parentImageViw = (ImageView) convertView.findViewById(R.id.arrow);
			if (isExpanded) {
				parentImageViw.setBackgroundResource(R.drawable.up_arrow);
			} else {
				parentImageViw.setBackgroundResource(R.drawable.down_arrow);
			}
			return convertView;
		}

		@Override
		public boolean hasStableIds() {
			return true;
		}

		@Override
		public boolean isChildSelectable(int groupPosition, int childPosition) {
			return true;
		}

	}
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// TODO Auto-generated method stub
		super.onCreateOptionsMenu(menu);
		mActionBar = getActionBar();
		mActionBar.setTitle("");
		mActionBar.setDisplayHomeAsUpEnabled(true);
		mActionBar.setDisplayShowHomeEnabled(false);
		return true;

	}
	@Override
	public void onBackPressed() {
		super.onBackPressed();
		System.out.println("按下了back键   onBackPressed()");
		showPre();
	}
	public void showPre() {
		// TODO Auto-generated method stub
		finish();
		overridePendingTransition(R.anim.tran_pre_in, R.anim.tran_pre_out);
	}
	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// TODO Auto-generated method stub
		switch (item.getItemId()) {
		case android.R.id.home:
			finish();
			this.overridePendingTransition(R.anim.tran_pre_in, R.anim.tran_pre_out);
			return true;
		default:
			return super.onOptionsItemSelected(item);
		}
	}
}

