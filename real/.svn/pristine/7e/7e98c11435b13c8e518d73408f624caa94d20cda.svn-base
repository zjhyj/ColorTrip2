package com.whut.myMap.fragment;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshListView;
import com.handmark.pulltorefresh.library.PullToRefreshBase.OnRefreshListener2;
import com.whut.myMap.GuideshowNET;
import com.whut.myMap.R;
import com.whut.myMap.Speak_MainNET;
import com.whut.myMap.Speak_Main_routeNET;
import com.whut.myMap.domain.redsbean;
import com.whut.myMap.entites.net;
import com.whut.myMap.utils.gsonutil;
import com.whut.myMap.adapter.*;
import com.whut.net.getLredsbytimenet;
import com.whut.net.getPredsbytimenet;
import com.whut.net.getlocalclusterpair;
import com.whut.net.getredsbytimenet;

import android.R.integer;
import android.app.Activity;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ListView;
import android.widget.Toast;

public class SpeakFragment5 extends Fragment {
	private View mParent;
	private static String jsonstring;
	private FragmentActivity mActivity;
	private LinkedList<net> mList;
    private ListViewAdapter_speak_guide myAdapter;	
	 static final int MENU_MANUAL_REFRESH = 0;  
	 static final int MENU_DISABLE_SCROLL = 1;  
	 static final int MENU_SET_MODE = 2;  
	 static final int MENU_DEMO = 3;  
	 private static boolean flag;  
	 private static ArrayList<net> person;
	 private final int SHOW_RESPONSE=0;
	 private final int SHOW_RESPONSE_FIRST=1;
	 private Handler handler=new Handler(){
			public void handleMessage(Message msg) {
				person=new ArrayList<net>();
				switch (msg.what) {
				case SHOW_RESPONSE:
					Log.i("zai", "enene2");
					if(Integer.parseInt((String) msg.obj)==1){
						Log.i("zai", "enene");
							Log.i("zai", "enene3");
							gsonutil gson=new gsonutil();
							Log.i("speak5",jsonstring);
							person=(ArrayList<net>) gson.fromJsonList(jsonstring, net.class);	
					}else{					
							Toast.makeText(getActivity(), "没有更多了！", 0).show();	
				            mPullRefreshListView.onRefreshComplete();  
							person=null;
						}
					break;
			}
			}
		};
	 private PullToRefreshListView mPullRefreshListView;  
	@Override
	public void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
	}
	/**
	 * Create a new instance of DetailsFragment, initialized to show the text at
	 * 'index'.
	 */
	public static SpeakFragment newInstance(int index) {
		SpeakFragment f = new SpeakFragment();
		// Supply index input as an argument.
		Bundle args = new Bundle();
		args.putInt("index", index);
		f.setArguments(args);
		return f;
	}
	public int getShownIndex() {
		return getArguments().getInt("index", 0);
	}
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		View view = inflater.inflate(R.layout.pulltorefresh_cotainer, container, false);
		return view;
	}
	@Override
	public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);
		mParent = getView();
		mActivity = getActivity();
		person=new ArrayList<net>();
		mList=new LinkedList<net>();	
//		getData();
		if(mList==null){return;}
			myAdapter = new ListViewAdapter_speak_guide(mList,mActivity);	
		 mPullRefreshListView = (PullToRefreshListView) mParent.findViewById(R.id.pull_refresh_list);  
	        /** 
	         * 实现 接口  OnRefreshListener2<ListView>  以便与监听  滚动条到顶部和到底部 
	         */  
	        mPullRefreshListView.setOnRefreshListener(new OnRefreshListener2<ListView>() {  
	            @Override  
	            public void onPullDownToRefresh( PullToRefreshBase<ListView> refreshView) {  
	                flag=false;
	                Log.i("down", "down");
	                new GetDataTask().execute();  
	            }  
	            @Override  
	            public void onPullUpToRefresh( PullToRefreshBase<ListView> refreshView) {  
	                flag=true;
	                Log.i("up", "up");
	                new GetDataTask().execute();  
	            }  
	        });  
	        ListView actualListView = mPullRefreshListView.getRefreshableView();  	  
	        // Need to use the Actual ListView when registering for Context Menu  
	        registerForContextMenu(actualListView);  
		// 把view层对象ListView和控制器BaseAdapter关联起来
		actualListView.setAdapter(myAdapter);
		actualListView.setOnItemClickListener(new OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> parent, View view,
					int position, long id) {
				Intent intent = new Intent(getActivity(), GuideshowNET.class);
				intent.putExtra("speak_item", mList.get(position-1).getNet_id());
				System.out.println( mList.get(position-1).getNet_id()+"dsfgfds");
				startActivity(intent);
			}
		});
	}
	@Override
	public void onResume() {
		super.onResume();
		 
	}
	@Override
	public void onHiddenChanged(boolean hidden) {
		super.onHiddenChanged(hidden);
		if (!hidden) {
		}
	}
	 //模拟网络加载数据的   异步请求类  
	   private class GetDataTask extends AsyncTask<Void, Void, Object> {  
	        //子线程请求数据  
	        @Override  
	        protected ArrayList<net> doInBackground(Void... params) {  
	            // Simulates a background job.     	 
//	             listreds=new ArrayList<redsbean>();
	            	if(flag){       		
	            		new Thread(new Runnable() {
							private String result;
							@Override
							public void run() { 
						try { 
							int netid;
							int zan;
						// TODO Auto-generated method stub
							if(mList==null||mList.size()<=0){  
								netid=999999;
								zan=999999; 
								}else{
						 netid=mList.get(mList.size()-1).getNet_id();
						zan=mList.get(mList.size()-1).getZan();}
						//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
						Log.i("resan",netid+"");
	            		Map<String,String> param=new HashMap<String, String>();
	            		param.put("netid", netid+"");
	            		param.put("zan", zan+"");
	            		param.put("pl", 0+"");
	            		 getlocalclusterpair getlocalclusterpair=new getlocalclusterpair();
	  		           String  jsonstring1=getlocalclusterpair.getPclusterpair(param);
	            		  if(jsonstring1!=null&&jsonstring1.length()>0){
	  		            	jsonstring=jsonstring1;	
	  		            	result=1+"";
	  		            }else{
	  		            	result="0";
	  		            	return;
	  		            }
	  					} catch (Exception e) {
	  					// TODO: handle exception
	  					result="2";
	  				}finally{
	  			Log.i("result",result.toString());
	  			Message message=new Message();
	  			message.what=SHOW_RESPONSE;
	  			message.obj=result.toString();		
	  			handler.sendMessage(message);	
	  				}
							}
						}).start();         
	            	}else {   
	            		new Thread(new Runnable() {
							private String result;
							@Override
							public void run() { 
						try { 
							int netid;
							int zan;
						// TODO Auto-generated method stub
							if(mList==null||mList.size()<=0){  
								netid=0;
								zan=0; 
								}else{
						 netid=mList.get(0).getNet_id();
						 zan=mList.get(0).getZan();
								}
						Log.i("resan",netid+"");
	            		Map<String,String> param=new HashMap<String, String>();
	            		param.put("netid", netid+"");
	            		param.put("zan", zan+"");
	            		param.put("pl", 1+"");
	            		 getlocalclusterpair getlocalclusterpair=new getlocalclusterpair();
		  		           String  jsonstring1=getlocalclusterpair.getPclusterpair(param);
	            		  if(jsonstring1!=null&&jsonstring1.length()>0){
	  		            	jsonstring=jsonstring1;	
	  		            	result=1+"";
	  		            }else{
	  		            	result="0";
	  		            	return;
	  		            }
	  					} catch (Exception e) {
	  					result="2";
	  				}finally{
	  			Log.i("result",result.toString());
	  			Message message=new Message();
	  			message.what=SHOW_RESPONSE;
	  			message.obj=result.toString();		
	  			handler.sendMessage(message);	
	  				}
							}
						}).start();
	            	}
	            	try {
						Thread.sleep(3000);
						return person;
					} catch (InterruptedException e) {
						e.printStackTrace();
						return person=null;
					}		
	            }    
	        //主线程更新UI  
	        @Override  
			protected void onPostExecute(Object result) {              
	        	if(result!=null){
				List<net> listredsbean=(ArrayList<net>) result;
			     if(!flag){
			     for(int i=listredsbean.size()-1;i>=0;i--){          
	             mList.addFirst(listredsbean.get(i));
			      }
			     Log.i("hou",123+"");
			     }
			     else {		    	 
			    	 for(int i=0;i<=listredsbean.size()-1;i++){
			             mList.add(listredsbean.get(i));
					     }
			    	 Log.i("hou",321+"");
				}
			    myAdapter.notifyDataSetChanged();    
	            //通知RefreshListView 我们已经更新完成  
	            // Call onRefreshComplete when the list has been refreshed.  
	            mPullRefreshListView.onRefreshComplete();  
	            super.onPostExecute(result);  
	        	}else{
	        		return;
	        	}
	        }  
	    }  	
	}
