package com.whut.myMap;

import java.sql.Date;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;

import com.handmark.pulltorefresh.library.PullToRefreshBase;
import com.handmark.pulltorefresh.library.PullToRefreshListView;
import com.handmark.pulltorefresh.library.PullToRefreshBase.OnRefreshListener2;
import com.whut.myMap.adapter.CommentListViewAdapter_my;
import com.whut.myMap.adapter.ListViewAdapter_speak_point;
import com.whut.myMap.domain.comment_message;
import com.whut.myMap.domain.redsbean;
import com.whut.myMap.domain.show_comment;
import com.whut.myMap.entites.url;
import com.whut.myMap.utils.gsonutil;
import com.whut.net.deleteUtilNet;
import com.whut.net.getHuifuNet;
import com.whut.net.getLredsbytimenet;
import com.whut.net.getMyCommentnet;
import com.whut.net.getPredsbytimenet;

import android.app.ActionBar;
import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.view.View.OnLongClickListener;
import android.widget.AdapterView;
import android.widget.ListView;
import android.widget.Toast;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.AdapterView.OnItemLongClickListener;

public class MyComment extends Activity {
	private static String jsonstring;
	private LinkedList<show_comment> mList;
	private static ArrayList<show_comment> person;
	private ProgressDialog pd;
	static final int MENU_MANUAL_REFRESH = 0;
	static final int MENU_DISABLE_SCROLL = 1;
	static final int MENU_SET_MODE = 2;
	static final int MENU_DEMO = 3;
	private static boolean flag;
	private int id;
	private String name;
	private int deletePosition;
	private CommentListViewAdapter_my myAdapter;
	private final int SHOW_RESPONSE = 0;
	private final int SHOW_RESPONSE_FIRST = 1;
	private final int DELETE_ITEM = 2;
	private Handler handler = new Handler() {
		public void handleMessage(Message msg) {
			person = new ArrayList<show_comment>();
			switch (msg.what) {
			case SHOW_RESPONSE:
				Log.i("zai", "enene2");
				if (Integer.parseInt((String) msg.obj) == 1) {
					Log.i("zai", "enene");
					Log.i("zai", "enene3");
					gsonutil gson = new gsonutil();
					Log.i("json", jsonstring);
					person = (ArrayList<show_comment>) gson.fromJsonList(jsonstring, show_comment.class);
				} else {
					Toast.makeText(getApplication(), "没有更多了！", 0).show();
					return;
				}
				break;
			case SHOW_RESPONSE_FIRST:
				if (Integer.parseInt((String) msg.obj) == 1) {
					Log.i("zai", "enene");
					Log.i("zai", "enene3");
					gsonutil gson = new gsonutil();
					Log.i("json", jsonstring);
					person = (ArrayList<show_comment>) gson.fromJsonList(jsonstring, show_comment.class);
					for (int i = 0; i < person.size(); i++) {
						mList.add(person.get(i));
					}
					myAdapter.notifyDataSetChanged();
					mPullRefreshListView.onRefreshComplete();
				} else {
					Toast.makeText(getApplication(), "请检查您的网络！", 0).show();
					return;
				}
				break;
			case DELETE_ITEM:
				if (Integer.parseInt((String) msg.obj) == 1) {
					mList.remove(deletePosition - 1);
					myAdapter.notifyDataSetChanged();
					mPullRefreshListView.onRefreshComplete();
					pd.dismiss();
				} else {
					Toast.makeText(getApplication(), "请检查您的网络！", 0).show();
					pd.dismiss();
					return;
				}
				break;
			}
		}
	};
	private PullToRefreshListView mPullRefreshListView;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.pulltorefresh_cotainer);
		person = new ArrayList<show_comment>();
		mList = new LinkedList<show_comment>();
		getData();
		myAdapter = new CommentListViewAdapter_my(mList, this);
		mPullRefreshListView = (PullToRefreshListView) findViewById(R.id.pull_refresh_list);
		/**
		 * 实现 接口 OnRefreshListener2<ListView> 以便与监听 滚动条到顶部和到底部
		 */
		mPullRefreshListView.setOnRefreshListener(new OnRefreshListener2<ListView>() {
			@Override
			public void onPullDownToRefresh(PullToRefreshBase<ListView> refreshView) {
				flag = true;
				new GetDataTask().execute();
			}

			@Override
			public void onPullUpToRefresh(PullToRefreshBase<ListView> refreshView) {
				flag = false;
				new GetDataTask().execute();
			}
		});
		ListView actualListView = mPullRefreshListView.getRefreshableView();
		// Need to use the Actual ListView when registering for Context Menu
		registerForContextMenu(actualListView);
		// 把view层对象ListView和控制器BaseAdapter关联起来
		actualListView.setAdapter(myAdapter);
		actualListView.setOnItemClickListener(new OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
				// TODO Auto-generated method stub
				Intent intent = null;
				if (mList.get(position - 1).getType() == 0) {
					intent = new Intent(getApplication(), Speak_MainNET_ST.class);
				} else if (mList.get(position - 1).getType() == 1) {
					intent = new Intent(getApplication(), Speak_Main_routeNET_ST.class);
				}
				intent.putExtra("source_id", mList.get(position - 1).getSource_id());
				startActivity(intent);
			}
		});
		actualListView.setOnItemLongClickListener(new OnItemLongClickListener() {

			@Override
			public boolean onItemLongClick(AdapterView<?> parent, View view, final int position, long id) {

				new AlertDialog.Builder(MyComment.this).setTitle("系统提示")// 设置对话框标题

						.setMessage("确认删除这条评论？")// 设置显示的内容

						.setPositiveButton("确定", new DialogInterface.OnClickListener() {// 添加确定按钮

					@Override

					public void onClick(DialogInterface dialog, int which) {// 确定按钮的响应事件
						deletePosition = position;
						// TODO Auto-generated method stub
						pd = ProgressDialog.show(MyComment.this, "标题", "正在删除，请稍等");

						/* 开启一个新线程，在新线程里执行耗时的方法 */
						new Thread(new Runnable() {
							private String result;

							@Override
							public void run() {
								try {
									Map<String, String> param = new HashMap<String, String>();
									int huifu_id=mList.get(position-1).getHuifu_id();
									param.put("huifu_id", huifu_id+"");
									deleteUtilNet deleteUtilNet = new deleteUtilNet();
									String jsonstring1 = deleteUtilNet.deleteComment(param);
									System.out.println(jsonstring1 + "jsonstring");
									if (jsonstring1 != null && jsonstring1.length() > 0) {
//										jsonstring = jsonstring1;
										result = "1";
									} else {
										result = "0";
										return;
									}
								} catch (Exception e) {
									// TODO: handle exception
									result = "0";
								} finally {
									Log.i("result", result.toString());
									Message message = new Message();
									message.what = DELETE_ITEM;
									message.obj = result.toString();
									handler.sendMessage(message);
								}
							}
						}).start();

					}

				}).setNegativeButton("取消", new DialogInterface.OnClickListener() {// 添加返回按钮

					@Override

					public void onClick(DialogInterface dialog, int which) {// 响应事件

						// TODO Auto-generated method stub

					}

				}).show();// 在按键响应事件中显示此对话框
				return false;
			}

		});
		getActionBar().setTitle("我的评论");
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// TODO Auto-generated method stub
		super.onCreateOptionsMenu(menu);
		ActionBar mActionBar = getActionBar();
		mActionBar.setDisplayHomeAsUpEnabled(true);
		mActionBar.setDisplayShowHomeEnabled(false);
		return true;

	}

	@Override
	public boolean onOptionsItemSelected(MenuItem item) {
		// TODO Auto-generated method stub
		switch (item.getItemId()) {
		case android.R.id.home:
			finish();
			this.overridePendingTransition(R.anim.tran_pre_in, R.anim.tran_pre_out);
			return true;
		default:
			return super.onOptionsItemSelected(item);
		}

	}

	/**
	 * 
	 * 评论 评论，日期，被评头像，被评人名字
	 * 
	 * @return
	 */
	private void getData() {
		person = new ArrayList<show_comment>();
		new Thread(new Runnable() {
			private String result;

			@Override
			public void run() {
				try {
					// TODO Auto-generated method stub
					SharedPreferences settings = getSharedPreferences("userInfo", 0);
					// 2、取出数据
					name = settings.getString(url.SPUSER_NAME, null);
					id = settings.getInt(url.SPUSER_ID, 0);
					getMyCommentnet gHuifuNet = new getMyCommentnet();
					String jsonstring1 = gHuifuNet.getmycommentnet();
					System.out.println(jsonstring1 + "jsonstring");
					if (jsonstring1 != null && jsonstring1.length() > 0) {
						jsonstring = jsonstring1;
						result = "1";
					} else {
						result = "0";
						return;
					}
				} catch (Exception e) {
					// TODO: handle exception
					result = "0";
				} finally {
					Log.i("result", result.toString());
					Message message = new Message();
					message.what = SHOW_RESPONSE_FIRST;
					message.obj = result.toString();
					handler.sendMessage(message);
				}
			}
		}).start();
	}

	// 模拟网络加载数据的 异步请求类
	//
	private class GetDataTask extends AsyncTask<Void, Void, Object> {
		// 子线程请求数据
		@Override
		protected ArrayList<show_comment> doInBackground(Void... params) {
			// Simulates a background job.
			// listreds=new ArrayList<redsbean>();

			new Thread(new Runnable() {
				private String result;

				@Override
				public void run() {
					try {
						getMyCommentnet getmyCommentnet = new getMyCommentnet();
						String jsonstring1 = getmyCommentnet.getmycommentnet();
						if (jsonstring1 != null && jsonstring1.length() > 0) {
							jsonstring = jsonstring1;
							result = 1 + "";
						} else {
							result = "0";
							return;
						}
					} catch (Exception e) {
						// TODO: handle exception
						result = "2";
					} finally {
						Log.i("result", result.toString());
						Message message = new Message();
						message.what = SHOW_RESPONSE;
						message.obj = result.toString();
						handler.sendMessage(message);
					}
				}
			}).start();
			try {
				Thread.sleep(3000);
				return person;
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				return null;
			}
		}

		// 主线程更新UI
		@Override
		protected void onPostExecute(Object result) {
			if (result != null) {
				mList.clear();
				List<show_comment> listmyComments = (ArrayList<show_comment>) result;
				if (flag == true) {
					for (int i = listmyComments.size() - 1; i >= 0; i--) {
						mList.addFirst(listmyComments.get(i));
					}
					Log.i("hou", 123 + "");
				} else if (flag == false) {
					for (int i = 0; i <= listmyComments.size() - 1; i++) {
						mList.add(listmyComments.get(i));
					}
					Log.i("hou", 321 + "");
				}
				myAdapter.notifyDataSetChanged();
				// 通知RefreshListView 我们已经更新完成
				// Call onRefreshComplete when the list has been refreshed.
				mPullRefreshListView.onRefreshComplete();
				super.onPostExecute(result);
			} else {
				return;
			}
		}
	}
}
